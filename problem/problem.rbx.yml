name: 'new-problem'
timeLimit: 1000  # ms
memoryLimit: 1024  # MB
outputLimit: 4096  # KB 
modifiers:  # Use `rbx languages` to list the languages available in your environment
  java:
    time: 2000  # Custom timing for Java
checker: {path: 'wcmp.cpp'}  # Download others from testlib with `rbx download checker`
validator: {path: 'validator.cpp'}
generators:
  - path: 'gen.cpp'
    name: 'gen'
testcases:
  - name: 'samples'
    testcaseGlob: 'tests/samples/*.in'  # Pattern for the sample inputs.
  - name: 'tests'
    generatorScript:
      path: 'testplan.txt'
# Solutions can be run with `rbx run`
solutions:
  - path: 'sols/main.cpp'
    outcome: ACCEPTED
  - path: 'sols/ac.java'
    outcome: ACCEPTED
  - path: 'sols/ac.py'
    outcome: ACCEPTED
  - path: 'sols/wa.cpp'
    outcome: WRONG_ANSWER
  - path: 'sols/slow.cpp'
    outcome: TLE_OR_RTE  # Can be TLE too
statements:
  - title: 'New Problem'
    path: 'statement/statement.rbx.tex'  # Open this file to edit your statement.
    type: rbxTeX
    language: 'pt'
    assets: ['statement/obi_new.sty', 'statement/defs.tex', 'statement/*.png', 'statement/*.pdf']
    configure:
      - type: 'rbx-tex'  # Convert rbxTeX to TeX
        template: 'statement/template.rbx.tex'
# Stresses can be run with `rbx stress`
stresses:
  - name: 'wa_stress'
    generator:
      name: 'gen'
      args: '[1..<MAX_N>] @' # `@` generates a random string
    finder: '[sols/wa.cpp] ~ INCORRECT'
vars:
  "MAX_N": 1000000000  # Can be used in the validator, in stress tests and in the statement.
  "MOD": py`10**9 + 7` # Can also be a Python3 expression
